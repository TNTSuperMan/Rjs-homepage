<div>
    <h1>Rjs</h1>
    <p>simple, react, fast.</p>
    {{ e("div",()=>props.list.map(e=>props.worldcard(e))) }}
    <div class="card">
        <div class="left">
            <input type="text" oncreate="props.create.name" oninput="props.edit.name">
        </div>
        <div class="right">
            <textarea oncreate="props.create.desc" oninput="props.edit.desc"></textarea>
        </div>
    </div>
    <button onclick="props.click">+</button>
    <h2>Why</h2>
    <ul>
        <li>サイズが小さい - 通信時間・計算量を削減</li>
        <li>仮想DOMを使わない - 不要な計算を削減</li>
        <li>ルート要素を指定しない - 自由度が増加</li>
    </ul>
    <h2>About</h2>
    <pre>
最近のフロントエンド開発では、フレームワークが用いられている。
しかし、そのプログラムが大きい。無駄が多い。クライアントにその
膨大なフレームワークの内容の通信を待たせるのだろうか？
自分はどうしても無駄を無くしたかった。

<br><br><b>そうして、Rjsの開発を開始した。</b><br><br>

フレームワークとして必要と思われた「<b>リアクティブシステム</b>」と
「<b>モジュール化</b>」のみに焦点を当ててフレームワークを作った。

DOM操作には少し近づき、TextとElementを分けた。さらに内部の
情報伝達にオブジェクトは使わず配列を使い、HTMLに近い記述法を
プラグインに託した。仮想DOMのライブラリはサイズが多いため
使わず、リアクティブな値は直接関数から受け取り、属性と子要素を
分け、子要素内のリアクティブな内容とは分けて高速化し、廃棄
された子要素内のリアクティブな内容を削除するため廃棄関数内に
リアクティブな内容を削除するコードを埋め込んだ。さらには
Typescriptで開発することで型安全にして、最善を尽くした。
</pre>
    <h2>Play</h2>
    {{ props.play() }}
    <h2>CDN</h2>
    <a target="_blank" href="https://unpkg.com/@tntsuperman/rjs@0.0.3/dist/browser.js">unpkg</a>
    <a target="_blank" href="https://cdn.jsdelivr.net/npm/@tntsuperman/rjs@0.0.3/dist/browser.js">jsdelivr</a>
    <h2>Link</h2>
    <a target="_blank" href="https://www.npmjs.com/package/@tntsuperman/rjs">npm</a>
    <a target="_blank" href="https://github.com/TNTSuperMan/Rjs">GitHub</a>
</div>
<link rel="stylesheet" href="../assets/style.css">